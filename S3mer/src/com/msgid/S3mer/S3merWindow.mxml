<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" showStatusBar="false"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" 
	visible="true" horizontalAlign="center" 
	verticalAlign="middle" cornerRadius="0" layout="absolute"
	backgroundColor="#FFFFFF"
	resize="onWindowResize()"
	 xmlns:ns1="com.msgid.S3mer.*">
	<mx:states>
		<mx:State name="loading">
			<mx:AddChild position="lastChild">
				<mx:Canvas id="LoadingCanvas" verticalScrollPolicy="off" horizontalScrollPolicy="off" visible="true" horizontalCenter="0" verticalCenter="0" width="320" height="240">
					<mx:SWFLoader id="myLoadingImage" source="assets/logo.swf" x="0" top="0" maintainAspectRatio="true"/>
					<mx:ProgressBar labelPlacement="bottom" id="myFileProgress" enabled="true" mode="manual" label=" " visible="false" bottom="10" right="10" left="10"/>
					<mx:ProgressBar labelPlacement="bottom" id="myTotalProgress" enabled="true" mode="manual" label=" " bottom="20" right="10" left="10"/>
					<mx:Label id="lblStatus" visible="false" left="0" right="0" color="#BDBDBD">
					</mx:Label>
					<mx:Label y="208" text="" id="fileProgress" left="10"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:RemoveChild target="{_loginWindow}"/>
		</mx:State>
		<mx:State name="playing">
			<mx:RemoveChild target="{_loginWindow}"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import com.msgid.S3mer.Events.DownloaderEvent;
			import com.msgid.S3mer.Events.ConfigurationEvent;
			import mx.events.EffectEvent;
			import mx.events.TweenEvent;
			import mx.events.ResizeEvent;
			import mx.managers.SystemManager;
			import com.msgid.S3mer.Utility.LoggerManager;

			
			private var _screenNumber:int;

			private var _log:LoggerManager = LoggerManager.instance;
			private var _configuration:ConfigurationManager;

			private var _stopped:Boolean = true;
			private var _applicationObject:S3mer;
			private var _multiScreen:Boolean;
			
			private var _showObject:Show;
			
			public function set show(myShow:Show):void {
				
				// If we already have a showObject assign and the new object is different
				// and the object is our child then, add the object in the same position as the old object
				// Otherwise, just add the object at the top
				if(this._showObject && this._showObject != myShow && this._showObject.parent == this) {
					this.addChildAt(myShow, this.getChildIndex(this._showObject));
					this.removeChild(this._showObject);
				} else {
//					if( this._showObject == myShow && myShow.parent != this ) {
//					}
					this.addChild(myShow);
				}
				
				// If the old object is someone's child, remove it, it is no longer used
//				if(this._showObject.parent != null) {
//					this._showObject.parent.removeChild(this._showObject);
//				}
				
				this._showObject = myShow;
				this._showObject.setStyle("top","0");
				this._showObject.setStyle("bottom","0");
				this._showObject.setStyle("left","0");
				this._showObject.setStyle("right","0");
				
				this.onWindowResize();
			}

			public function get show():Show{
				return _showObject;
			}
			
			public function get screenId():int {
				return this._screenNumber;
			}
			
			public function set applicationObject(obj:S3mer):void {
				this._applicationObject = obj;
			}
			
			public function get configuration():ConfigurationManager {
				return this._configuration;
			}
			
			public function set stopped(value:Boolean):void {
				_stopped = value;
			}
			
			public function get channelId():String {
				return this._configuration.channelId;		
			}

			
			// Receives screenNumber in which to display this screen,
			// changes the objects bounds to that screen
			// returns screenNumber or -1
			public function setScreen(screenNumber:int):int {
				var _screen:Screen;
				
				if ( screenNumber >= Screen.screens.length ) {
					return -1;
				} 
				
				_screen = Screen.screens[screenNumber];
				
				this.bounds = _screen.bounds;
				this._screenNumber = screenNumber;
				
				return screenNumber;
			}
			
			public function getScreen():int {
				return this._screenNumber;
			}
			
			public function showWindow():void {
				var _screen:Screen = Screen.screens[this._screenNumber];
				
				this.setStyle("backgroundColor","#FFFFFF");				
				this.visible = true;

				
				this.title = "Screen #" + this._screenNumber;
				
				// This restores the window position if it saved in the config
				if(ApplicationSettings.getValue("screen" + this._screenNumber + ".location.width", "0") != "0") {
					this.move(parseInt(ApplicationSettings.getValue("screen" + this._screenNumber + ".location.x", "0"),10),
							  parseInt(ApplicationSettings.getValue("screen" + this._screenNumber + ".location.y", "0"),10));
					this.width =  parseInt(ApplicationSettings.getValue("screen" + this._screenNumber + ".location.width", "0"),10);
					this.height =  parseInt(ApplicationSettings.getValue("screen" + this._screenNumber + ".location.height", "0"),10);
					
				} else {
					this.move(_screen.bounds.x,_screen.bounds.y);
					this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				}
			}
			
			public function enableKeyHandler():void {
				if(this.stage) {
					if ( !this.stage.willTrigger(KeyboardEvent.KEY_UP) ) {
						this.stage.addEventListener(KeyboardEvent.KEY_UP,HandleKeyUp,false,0,true);
					}
				}
			}
			
			public function disableKeyHandler():void {
				this.stage.removeEventListener(KeyboardEvent.KEY_UP,HandleKeyUp);				
			}
			
			private function HandleKeyUp(e:KeyboardEvent):void {
				KeyboardManager.HandleKeyUp(e,this);
			}
						
			private function onWindowResize():void {
				LoggerManager.addEvent("Screen #" + this._screenNumber + " size is: " + this.width + "x" + this.height);
				
				if( this._showObject != null ) {
					LoggerManager.addEvent("Screen #" + this._screenNumber + ": resizing");
					this._showObject.width = this.width;
					this._showObject.height = this.height;
					this._showObject.resize();
				} else {
					LoggerManager.addEvent("Screen #" + this._screenNumber + ": NOT resizing, show is null");
				}
			}
			
			public function loadConfiguration(multiScreen:Boolean):void {
				this.currentState = "loading";

				this._multiScreen = multiScreen;

				this.setStyle("backgroundColor","#FFFFFF");				
				
				if(this._configuration == null ) {
					this._configuration = new ConfigurationManager(this, multiScreen);
					
					this._configuration.addEventListener(ConfigurationEvent.UPDATED, OnConfigurationUpdate);
					this._configuration.addEventListener(DownloaderEvent.PARTIAL_COMPLETE, OnDownloadSingleFileComplete);
					this._configuration.addEventListener(DownloaderEvent.PROGRESS, OnDownloadSingleFileProgress);				
					
					if( this.fileProgress )	
						this.fileProgress.text = "Updating Configuration...";
				}
	
				this._configuration.start();
				
			}
			
			public function play():void {
				this.currentState = "playing";
				this._stopped = false;
				this._configuration.play();
			}
			
			public function reload():void {
				this._configuration.reload();
			}

			private function OnConfigurationUpdate(e:ConfigurationEvent):void {
				if (this.currentState == "loading") {
					myFileProgress.setProgress(100,100);
					myTotalProgress.setProgress(100,100);
					
					_faderObject.setup();
					_faderObject.addEventListener(EffectEvent.EFFECT_END, OnFadeComplete);
	
					_faderObject.fadeOut(250, false);
					
					this.currentState = "playing";
				} else {
					this.setStyle("backgroundColor","#000000");
					this.play();
				}
				
				this.enableKeyHandler();
			}
			
//			private var pictureTimer:Timer;

//			private function snagPic(e:Event):void {
//				return;
//				
//				var bitmapData:BitmapData;
//				var newImage:File;
//				var fileStream:FileStream;
//				
//				bitmapData = new BitmapData(this.width,this.height,false,0x00000000);
//				bitmapData.draw(this,new Matrix());
//				var bitmap:Bitmap = new Bitmap(bitmapData);
//
//				this._notificationPanel.showNotification("Thumbnail");				
//				
//				var jpg:PNGEncoder = new PNGEncoder();
//				
//				var ba:ByteArray = jpg.encode(bitmapData);
////				var ba:ByteArray = bitmap..encode(bitmapData);
//				newImage = File.applicationStorageDirectory.resolvePath("cap"+ this._screenNumber +".png");
//				fileStream = new FileStream();
//				fileStream.open(newImage, FileMode.UPDATE);
//				fileStream.writeBytes(ba);
//				fileStream.close();
//			}
			
			private function OnFadeComplete(e:EffectEvent):void {
				_faderObject.removeEventListener(EffectEvent.EFFECT_END, OnFadeComplete);
				_faderObject.addEventListener(EffectEvent.EFFECT_END, OnFadeComplete_stage2);
				
				LoggerManager.addEvent("Current BKG Color : " + this.getStyle("backgroundColor"));
				this.setStyle("backgroundColor","#000000");
				LoggerManager.addEvent("Current BKG Color : " + this.getStyle("backgroundColor"));
				
				_faderObject.fadeIn(100, true);
			}
			
			private function OnFadeComplete_stage2(e:EffectEvent):void {
				_faderObject.removeEventListener(EffectEvent.EFFECT_END, OnFadeComplete_stage2);

				if (this._stopped == true) {
					this._stopped = false;
					this.play();
				}
				
//				pictureTimer = new Timer(1000,1);
//				pictureTimer.addEventListener(TimerEvent.TIMER,snagPic);
//				pictureTimer.start();
			}
			
			private function OnDownloadSingleFileProgress(e:DownloaderEvent):void {
				var fileProgressText:String = this._configuration.getDownloadText();
				
				this.myTotalProgress.setProgress((e._downloader as Downloader).percent,100);
				
				if( this.fileProgress.text != fileProgressText ) {
					this.fileProgress.text = fileProgressText;
				}
			}
			
			private function OnDownloadSingleFileComplete(e:DownloaderEvent):void {
				this.myTotalProgress.setProgress(100,100);
//				this.fileProgress.text = this._configuration.getDownloadText();
			}

			public function reloadApp():void {
				(this._applicationObject as S3mer).reloadApp();
			}
			
			public function resetApp():void {
				this._configuration.stopDownloads();
				this._configuration.removeEventListener(ConfigurationEvent.UPDATED, OnConfigurationUpdate);
				this._configuration.removeEventListener(DownloaderEvent.PARTIAL_COMPLETE, OnDownloadSingleFileComplete);
				this._configuration.removeEventListener(DownloaderEvent.PROGRESS, OnDownloadSingleFileProgress);			
				this._applicationObject.resetApp();
			}
			
			public function doReload():void {
				this.setStyle("backgroundColor","#FFFFFF");				
				this.loadConfiguration(this._multiScreen);
			}
			
			public function saveWindowPositions():void {
				this._applicationObject.saveWindowPositions();
			}
			
			public function redoInitialSetup():void {
				this._applicationObject.doInitialSetup(true);
			}
			
			public function cleanMediaDirectory():void {
				this._configuration.cleanupMedia();	
			}
			
		]]>
	</mx:Script>
	
	<ns1:NotificationPanel id="_notificationPanel" right="10" top="10" visible="false" />
	<ns1:LoginWindow id="_loginWindow" alpha="0.0" horizontalCenter="0" verticalCenter="0" visible="false" />
	<ns1:FadePanel left="0" top="0" bottom="0" right="0" id="_faderObject" visible="false">
	</ns1:FadePanel>
</mx:Window>
