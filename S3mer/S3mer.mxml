<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	applicationComplete="onAppLoad(event)"
	invoke="onInvoke(event)"
	resize="onAppResize(event)" 
	close="onAppClose(event)"
	borderStyle="none" showStatusBar="false" 
	applicationDeactivate="reAquireFocus()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="#000000"
     xmlns:ns1="com.msgid.S3mer.*">
	
	<mx:Script>
		<![CDATA[
			import mx.core.Window;
			import com.msgid.S3mer.KeyboardManager;
			import mx.collections.ArrayCollection;
			import com.msgid.S3mer.S3merWindow;
			import com.msgid.S3mer.Show;
			import com.msgid.S3mer.ApplicationUpdater;
			import mx.skins.halo.ApplicationTitleBarBackgroundSkin;
			import com.msgid.S3mer.ApplicationSettings;
			import com.msgid.S3mer.Effects.TVEffect;
			import mx.effects.Sequence;
			import mx.effects.Resize;
			import mx.charts.effects.SeriesEffect;
			import com.msgid.S3mer.LoginWindow;
			import mx.messaging.Producer;
			import com.msgid.S3mer.DownloadQueue;
			import com.msgid.S3mer.DownloaderEvent;
			import mx.events.EffectEvent;
			import com.msgid.S3mer.FadePanel;
			import mx.containers.Canvas;
			import mx.controls.ProgressBar;
			import mx.binding.utils.BindingUtils;
			import mx.controls.Image;
			import com.msgid.S3mer.RSSFeedPanel;
			import mx.events.TweenEvent;
			import mx.effects.Move;
			import mx.effects.Fade;
			import mx.effects.TweenEffect;
			import mx.effects.Tween;
			import com.msgid.S3mer.FileIO;
			import mx.controls.SWFLoader;
			import com.msgid.S3mer.Logger;
			import mx.effects.Effect;
			import mx.events.ResizeEvent;
			import com.msgid.S3mer.ConfigurationManager;
			import com.msgid.S3mer.ConfigurationEvent;
			import mx.core.Application;
			import mx.events.FlexEvent;
			
			private var _log:Logger = Logger.instance;
			private var _updater:ApplicationUpdater;
			private var myLoginWindow:LoginWindow;
			private var _playerWindows:ArrayCollection = new ArrayCollection;
			
			
//			[Embed(source="assets/loader.gif")]
//			[Bindable]
//			public static var LoadingImage:Class;
			

			private function reAquireFocus():void {
				this.activate();
				systemManager.stage.nativeWindow.orderToFront();
			}
			
			private function OnHideLogComplete(e:TweenEvent):void {
				e.target.removeEventListener(TweenEvent.TWEEN_END,OnHideLogComplete);
				this.appLog.visible = false;
			}
			
			
			
			private function onAppLoad(e:FlexEvent):void {
				this.frameRate = 30;
				this._log.addEventListener(Event.ADDED, onLogUpdate,false,0,true);
				URLRequestDefaults.setLoginCredentialsForHost("www.s3mer.com","development","mils0ft");
				
				myLoginWindow = new LoginWindow();
				myLoginWindow.visible = false;
				this.addChild(myLoginWindow);
				
				
				var screenNumber:int = 0;
				var _window:S3merWindow;
				for each( var _screen:Screen in Screen.screens ) {
					Logger.addEvent("Creating window for screen #" + screenNumber);
					_window = new S3merWindow();
					_window.setScreen(screenNumber);
					_window.open(false);
					_window.showWindow();
					this._playerWindows.addItem(_window);
					screenNumber++;	
				}

				myLoginWindow.checkCredentials(onAppLoad_postLogin);
			}
			
			private function HandleKeyUp(e:KeyboardEvent):void {
				KeyboardManager.HandleKeyUp(e,this);
			}
			
			private function onAppClose(e:Event):void {
				exit();
			}
			
			private function onAppLoad_postLogin(e:Event):void {
				if (e == null || URLLoader(e.target).data != "OK") {
					this.doLogin();
				} else {
					onAppLoad_stage2(e);
				}	
			}
			
			private function doLogin():void {				
				var tmpWidth:Number = myLoginWindow.width + 30;
				var tmpHeight:Number = myLoginWindow.height + 30;
				
				this.move((Capabilities.screenResolutionX - tmpWidth)/2,(Capabilities.screenResolutionY - tmpHeight)/2);
//				systemManager.topLevelSystemManager.screen.x = (Capabilities.screenResolutionX - this.width)/2;
//				systemManager.topLevelSystemManager.screen.y = (Capabilities.screenResolutionY - this.height)/2;
				
				myLoginWindow.setStyle("horizontalCenter",0);
				myLoginWindow.setStyle("verticalCenter",0);
				myLoginWindow.addEventListener("WINDOW_CLOSED",onAppLoad_stage2,false,0,true);
				myLoginWindow.setup();
				myLoginWindow.visible = true;
				this.setStyle("backgroundColor","#FFFFFF");
				this.setChildIndex(myLoginWindow,this.numChildren-1);

				
				stage.nativeWindow.visible = true;
				this.visible = true;
				cursorManager.removeBusyCursor();
				
				myLoginWindow.show();	
				this.width = tmpWidth;			
				this.height = tmpHeight;		
			}
			
			private function onAppLoad_stage2(e:Event):void {
				this.removeChild(this.myLoginWindow);

				systemManager.stage.addEventListener(KeyboardEvent.KEY_UP,HandleKeyUp,false,0,true);
				if (ApplicationSettings.getValue("ui.showcursor") != "true") {
					this.cursorManager.setBusyCursor();
					this.cursorManager.hideCursor();
				}
//				systemManager.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				this.move(-100-this.width,this.y);
//				systemManager.stage.nativeWindow.alwaysInFront = true;
				stage.nativeWindow.visible = true;
				this._updater.start();
				
				doInitialSetup();
				
				this.setStyle("backgroundColor","#FFFFFF");
				
				for each( var _window:S3merWindow in this._playerWindows) {
					_window.loadConfiguration();
				}
				this.setFocus();
			}
			
			private function doInitialSetup():void {
				if (FileIO.assetsPath() == null) {
					Logger.addEvent("Could not find assets path, cannot do initial setup");
					return;
				}
				
				var storePath:File = new File(FileIO.storePath());
				var assetsPath:File = new File(FileIO.assetsPath());
				var appPath:File = new File(FileIO.appPath());
				
				storePath.resolvePath("Utilities").createDirectory();
				
				switch( FileIO.getOs() ) {
					case 'WINDOWS':
						try {
							var firstimeFile:File = File.userDirectory.resolvePath("Start Menu").resolvePath("Programs").resolvePath("Startup").resolvePath("firstrun.bat");
							var templateFile:File;
							var firstimeStream:FileStream = new FileStream();
							var templateStream:FileStream = new FileStream();
							
							if (File.userDirectory.resolvePath("Start Menu").resolvePath("Programs").resolvePath("Startup").resolvePath("S3mer.lnk").exists) {
								return;
							}
							
							assetsPath = assetsPath.resolvePath("Windows");
							
							templateFile = assetsPath.resolvePath("firstrun.bat");
							
							templateStream.open(templateFile,FileMode.READ);
							firstimeStream.open(firstimeFile,FileMode.WRITE);
							
							firstimeStream.writeMultiByte("set APPPATH=" + appPath.nativePath + "\r\n", File.systemCharset);
							firstimeStream.writeMultiByte("@echo off\r\n", File.systemCharset);
							
							var contents:String = templateStream.readMultiByte(templateStream.bytesAvailable, File.systemCharset);
							
							firstimeStream.writeMultiByte(contents,File.systemCharset);
							
							templateStream.close();
							firstimeStream.close();
						} catch(e:Error) {
							
						}
						break;
					case 'MAC':
						break;
					case 'LINUX':
						break;
					default:
						break;
				}
			}
			
			private function onInvoke(e:InvokeEvent):void {
		        var now:String = new Date().toTimeString();
		        Logger.addEvent("Invoke event received: " + now);
		                
		        if(e.currentDirectory != null){
		            Logger.addEvent("Current directory=" + e.currentDirectory.nativePath);
		        } else {
		            Logger.addEvent("--no directory information available--");
		        }
		                
		        if(e.arguments.length > 0){
		            Logger.addEvent("Arguments: " + e.arguments.toString());
		        } else {
		            Logger.addEvent("--no arguments--");
		        }
				this.visible = false;
				this.move((Capabilities.screenResolutionX-this.width)/2,(Capabilities.screenResolutionY-this.height)/2);
				
				this._updater = new ApplicationUpdater();
			}
			
			private function onLogUpdate(e:Event):void {
				this.appLog.text = Logger.log;
			}
			
			private function onAppResize(e:ResizeEvent):void {
//				if ( _configuration != null) {
//					this._configuration.resize(DisplayObject(e.target).height,DisplayObject(e.target).width);
//				}
			}
			
			private function play():void {
				for each( var _window:S3merWindow in this._playerWindows) {
					_window.play();
				}
				
			}
			
		]]>
	</mx:Script>
	<mx:TextArea id="appLog" visible="false" height="116" wordWrap="true" editable="false" enabled="true"  color="#000000" cornerRadius="0" alpha="0.5" borderStyle="none" borderThickness="8" left="13" right="12" bottom="10"/>
	<ns1:NotificationPanel id="_notificationPanel" right="10" top="10" visible="false">
	</ns1:NotificationPanel>
		
</mx:WindowedApplication>
