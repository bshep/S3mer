<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	applicationComplete="onAppLoad(event)"
	invoke="onInvoke(event)"
	resize="onAppResize(event)" 
	borderStyle="none" showStatusBar="false" 
	applicationDeactivate="reAquireFocus()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="#000000"
     xmlns:ns1="com.msgid.S3mer.*">
	
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import com.msgid.S3mer.FileIO;
			import mx.core.Window;
			import com.msgid.S3mer.ApplicationSettings;
			import com.msgid.S3mer.KeyboardManager;
			import com.msgid.S3mer.S3merWindow;
			import mx.collections.ArrayCollection;
			import com.msgid.S3mer.LoginWindow;
			import com.msgid.S3mer.ApplicationUpdater;
			import com.msgid.S3mer.Logger;
			import mx.events.ResizeEvent;
			import mx.events.FlexEvent;
			import mx.events.TweenEvent;
			
			private var _log:Logger = Logger.instance;
			private var _updater:ApplicationUpdater;
			private var myLoginWindow:LoginWindow;
			private var _playerWindows:ArrayCollection = new ArrayCollection;
			
			private function reAquireFocus():void {
				this.activate();
				systemManager.stage.nativeWindow.orderToFront();
			}
			
			private function OnHideLogComplete(e:TweenEvent):void {
				e.target.removeEventListener(TweenEvent.TWEEN_END,OnHideLogComplete);
				this.appLog.visible = false;
			}
			
			private function isMultiscreen():Boolean {
				var multiScreen:Boolean;
				
				if(this._playerWindows.length > 1) {
					multiScreen = true;
				} else {
					multiScreen = false;
				}
				
				return multiScreen;
			}
			
			private function onReloadPlayerWindows(e:TimerEvent):void {
				var tmpScreen:int;
				var tmpArray:ArrayCollection = new ArrayCollection();
				
				for each( var _window:S3merWindow in this._playerWindows ) {
					tmpScreen = _window.getScreen();
					_window.stop();
					_window.close();
					
					_window = new S3merWindow();
					_window.setScreen(tmpScreen);
					_window.open(false);
					_window.showWindow();
					_window.loadConfiguration(isMultiscreen());
					
					tmpArray.addItem(_window);
				}
				this._playerWindows.removeAll();
				this._playerWindows = tmpArray;
			}
			
			
			private function onAppLoad(e:FlexEvent):void {
				this.frameRate = 30;
				this._log.addEventListener(Event.ADDED, onLogUpdate,false,0,true);
//				this._reloadPlayerTimer = new Timer(5*60*1000);
//				this._reloadPlayerTimer.addEventListener(TimerEvent.TIMER, onReloadPlayerWindows);
//				this._reloadPlayerTimer.start();
				
				//URLRequestDefaults.setLoginCredentialsForHost("www.s3mer.com","development","mils0ft");
				
				myLoginWindow = new LoginWindow();
				myLoginWindow.visible = false;
//				this.addChild(myLoginWindow);

				
				
				var screenNumber:int = 0;
				var _window:S3merWindow;
				for each( var _screen:Screen in Screen.screens ) {
					Logger.addEvent("Creating window for screen #" + screenNumber);
					_window = new S3merWindow();
					_window.setScreen(screenNumber);
					_window.ObjOwner = this;
					_window.open(false);
					_window.showWindow();
					this._playerWindows.addItem(_window);
					if( screenNumber == 0 ) {
						_window.addChild(myLoginWindow);
					}
					screenNumber++;
//					break; // Only show 1 window
				}


				this.stage.addEventListener(Event.CLOSE,onAppClose, false, 0, true);
				myLoginWindow.checkCredentials(onAppLoad_postLogin);
//				this.close();
			}
			
			private function HandleKeyUp(e:KeyboardEvent):void {
				KeyboardManager.HandleKeyUp(e,this);
			}
			
			private function onAppClose(e:Event):void {
				exit();
			}
			
			public function resetApp():void {
				myLoginWindow = new LoginWindow;
				myLoginWindow.visible = false;
				
				for each( var _window:S3merWindow in this._playerWindows ) {
					_window.doReset(myLoginWindow);
				}				
				myLoginWindow.checkCredentials(onAppLoad_postLogin);
			}
			
			public function reloadApp():void {
				for each( var _window:S3merWindow in this._playerWindows ) {
					_window.doReload();
				}				
			}
			
			private function onAppLoad_postLogin(e:Event):void {
				if (e == null || URLLoader(e.target).data != "OK") {
					this.doLogin();
				} else {
					onAppLoad_stage2(e);
				}	
			}
			
			private function doLogin():void {				
				myLoginWindow.setStyle("horizontalCenter",0);
				myLoginWindow.setStyle("verticalCenter",0);
				myLoginWindow.addEventListener("WINDOW_CLOSED",onAppLoad_stage2,false,0,true);
				this.setStyle("backgroundColor","#FFFFFF");

				if ( stage.nativeWindow.closed != true ) { 
					stage.nativeWindow.visible = true;
					this.visible = true;
				}
					
				cursorManager.removeBusyCursor();
				
				myLoginWindow.visible = true;	
			}
			
			private function onAppLoad_stage2(e:Event):void {
				myLoginWindow.parent.removeChild(this.myLoginWindow);

				systemManager.stage.addEventListener(KeyboardEvent.KEY_UP,HandleKeyUp,false,0,true);
				if (ApplicationSettings.getValue("ui.showcursor") != "true") {
					this.cursorManager.setBusyCursor();
					this.cursorManager.hideCursor();
				}
//				systemManager.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
//				this.move(-100-this.width,this.y);
//				systemManager.stage.nativeWindow.alwaysInFront = true;
//				stage.nativeWindow.visible = true;
				this._updater.start();
				
				if( doInitialSetup() == false ) {
					return;
				}
				
//				this.setStyle("backgroundColor","#FFFFFF");
				
				for each( var _window:S3merWindow in this._playerWindows) {
					_window.loadConfiguration(isMultiscreen());
					_window.enableKeyHandler();
				}
				this.stage.removeEventListener(Event.CLOSE,onAppClose);
				Window(this._playerWindows.getItemAt(0)).activate();
				this.close();
			}
			
			public function doInitialSetup(ignoreFlags:Boolean = false):Boolean {
				if (FileIO.assetsPath() == null) {
					Logger.addEvent("Could not find assets path, cannot do initial setup");
					return false;
				}
				
				var storePath:File = new File(FileIO.storePath());
				var assetsPath:File = new File(FileIO.assetsPath());
				var appPath:File = new File(FileIO.appPath());
				
				storePath.resolvePath("Utilities").createDirectory();
				
				try {
					if( ApplicationSettings.getValue("ui.autoStartEnabled","true") == "true" ) {
						NativeApplication.nativeApplication.startAtLogin = true;
					} else {
						NativeApplication.nativeApplication.startAtLogin = false;
					}
										
				} catch( e:IllegalOperationError) {
					Logger.addEvent("could not set to startup");
				}
				
				return true;
				
				switch( FileIO.getOs() ) {
					case 'WINDOWS':
						try {
							var firstimeFile:File = File.userDirectory.resolvePath("firstrun.bat");
							var templateFile:File;
							var firstimeStream:FileStream = new FileStream();
							var templateStream:FileStream = new FileStream();
							
							if (ignoreFlags == false && File.userDirectory.resolvePath("S3merSetupDone").exists) {
								return true;
							}
							
							assetsPath = assetsPath.resolvePath("Windows");
							
							templateFile = assetsPath.resolvePath("firstrun.bat");
							
							templateStream.open(templateFile,FileMode.READ);
							firstimeStream.open(firstimeFile,FileMode.WRITE);
							
							firstimeStream.writeMultiByte("set APPPATH=" + appPath.nativePath + "\r\n", File.systemCharset);
							firstimeStream.writeMultiByte("@echo off\r\n", File.systemCharset);
							
							var contents:String = templateStream.readMultiByte(templateStream.bytesAvailable, File.systemCharset);
							
							firstimeStream.writeMultiByte(contents,File.systemCharset);
							
							templateStream.close();
							firstimeStream.close();
							
							assetsPath.resolvePath("s3merConfig.ico").copyTo(File.userDirectory.resolvePath("s3merConfig.ico"),true);
							assetsPath.resolvePath("LAUNCH.SHK").copyTo(File.userDirectory.resolvePath("Desktop").resolvePath("S3mer Config.lnk"),true);
						} catch(e:Error) {
							trace(e.message);
						}
						break;
					case 'MAC':
						if (ignoreFlags == false && File.userDirectory.resolvePath("Library").resolvePath("Preferences").resolvePath("com.s3mer.playerConfig").resolvePath("configDone").exists) {
							return true;
						}
						
						assetsPath = assetsPath.resolvePath("Mac");
						
						if(!File.userDirectory.resolvePath("Desktop").resolvePath("S3merConfig.app").exists) {
							assetsPath.resolvePath("S3merConfig.app").copyTo(File.userDirectory.resolvePath("Desktop").resolvePath("S3merConfig.app"));						
						}
																		
						break;
					case 'LINUX':
						break;
					default:
						break;
				}
				
				for each( var _win:S3merWindow in this._playerWindows) {
					_win.displayImage(assetsPath.resolvePath("firstrun.swf"));
					_win.enableKeyHandler();
				}
				
				return false;
			}
			
			private function onInvoke(e:InvokeEvent):void {
		        var now:String = new Date().toTimeString();
		        Logger.addEvent("Invoke event received: " + now);
		                
		        if(e.currentDirectory != null){
		            Logger.addEvent("Current directory=" + e.currentDirectory.nativePath);
		        } else {
		            Logger.addEvent("--no directory information available--");
		        }
		                
		        if(e.arguments.length > 0){
		            Logger.addEvent("Arguments: " + e.arguments.toString());
		        } else {
		            Logger.addEvent("--no arguments--");
		        }
				this.visible = false;
				this.move(-1000,-1000);
				
				this._updater = new ApplicationUpdater();
			}
			
			private function onLogUpdate(e:Event):void {
				this.appLog.text = Logger.log;
			}
			
			private function onAppResize(e:ResizeEvent):void {
//				if ( _configuration != null) {
//					this._configuration.resize(DisplayObject(e.target).height,DisplayObject(e.target).width);
//				}
			}
			
			private function play():void {
				for each( var _window:S3merWindow in this._playerWindows) {
					_window.play();
				}
				
			}
			
			public function cleanMediaDirectory():void {
				var curMedia:File = new File(FileIO.storePath()).resolvePath("media");

				for each( var _file:File in curMedia.getDirectoryListing()) {
					try {
						if (_file.name != "settings.xml" ) {
							_file.deleteFileAsync();
						}
					} catch (e:Error) {
						Logger.addEvent(e.message);
					}
				}
				Application.application.exit();							
			}
		]]>
	</mx:Script>
	<mx:TextArea id="appLog" visible="false" height="116" wordWrap="true" editable="false" enabled="true"  color="#000000" cornerRadius="0" alpha="0.5" borderStyle="none" borderThickness="8" left="13" right="12" bottom="10"/>
	<ns1:NotificationPanel id="_notificationPanel" right="10" top="10" visible="false">
	</ns1:NotificationPanel>
		
</mx:WindowedApplication>
