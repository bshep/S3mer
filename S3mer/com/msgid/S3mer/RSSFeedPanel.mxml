<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="971" height="81" backgroundColor="#000000"
	 creationComplete="onCreate(event)"
	 resize="onResize(event)"
	  xmlns:display="flash.display.*"
	   verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundAlpha="0.0">
	<mx:constraintColumns>
		<mx:ConstraintColumn id="Canvas1_col3" width="0.9%"/>
		<mx:ConstraintColumn id="Canvas1_col1" width="11%"/>
		<mx:ConstraintColumn id="Canvas1_col2" width="88.1%"/>
	</mx:constraintColumns>
	<mx:Image maintainAspectRatio="true" scaleContent="true" id="logo" autoLoad="true" top="0" bottom="0" right="Canvas1_col1:0" left="Canvas1_col1:0" verticalAlign="middle" horizontalAlign="center"/>
	<mx:SWFLoader  scaleContent="true" id="logoSWF" top="0" bottom="0" right="Canvas1_col1:0" left="Canvas1_col1:0" verticalAlign="middle" horizontalAlign="center"/>
	<mx:Style>
		@font-face {
		    src:url("/assets/Helvetica Neue Condensed Black.ttf");
		    fontFamily: HelvNeueBlack;
		}
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
//			import com.adobe.utils.;
			import mx.events.ResizeEvent;
			import mx.controls.Label;
			import mx.events.EffectEvent;
			import mx.effects.Move;
			private function onCreate(e:Event):void {
			}
			
			private var resizing:Boolean = false;
			
			private function onResize(e:ResizeEvent):void {
				resize();
			}
			
			public function set color(val:String):void {
				this._color = val;
				
				if (headtext != null ) { 
					this.headtext.setStyle("color","#" + val);
					this.bodytext.setStyle("color","#" + val);
				}
			}
			
			public function get color():String {
				return this._color;
			}
			
			private const _origWidth:int = 971;
			private const _origHeight:int = 81;
			
			public var delay:int;
			public var source:String;
			public var logoUrl:String;
			
			private var _timer:Timer;
			private var _reloadTimer:Timer;
			private var _lastUpdateDate:Date;
			private var _RSSXML:XML = new XML();
			private var _loader:URLLoader;
			private var _currentHeadline:int = 0;
			
			private var _color:String;
			
			public function play():void {
				trace("RSS URL: " +this.source);
				trace("Logo URL: " +this.logoUrl);
				trace("delay: " +this.delay);
				
				if (_timer == null ) {
					_timer = new Timer(this.delay);
					_timer.addEventListener(TimerEvent.TIMER, OnTimer,false,0,true);
				} else {
					_timer.delay = this.delay;
				}

				if (_reloadTimer == null ) {
					_reloadTimer = new Timer(this.delay);
					_reloadTimer.addEventListener(TimerEvent.TIMER, OnReloadTimer,false,0,true);
				} else {
					_reloadTimer.delay = 1*60*1000;
				}

				this._lastUpdateDate = new Date();
				this._lastUpdateDate.setTime(0);

				this.RSSLoadBegin();

				
				this.logoSWF.source = this.logoUrl;
				
				this.logo.visible = false;

				this.resize();

				if (headtext != null ) { 
					this.headtext.setStyle("color","#" + this._color);
					this.bodytext.setStyle("color","#" + this._color);
				}
				
				_reloadTimer.start();
			}
			
			public function stop():void {
				this._timer.stop();
				this._reloadTimer.stop();
			}
			
			public function pause():void {
				this.stop();
			}
			
			public function resume():void {
				this._timer.start();
				this._reloadTimer.start();
			}
			
			public function next():void {
				this.play_next();
			}
			
			public function prev():void {
				this.prev_headline();
				this.prev_headline();
				this.play_next();
			}
			
			public function resize():void {
				if ( this.resizing == false ) {
					this.resizing = true;
					var scaleX:Number = (this.width / this._origWidth);
					var scaleY:Number = (this.height / this._origHeight);
					
					var scale:Number;
					
					if (scaleX >scaleY ) {
						scale = scaleY;
					} else {
						scale = scaleX;
					}
					
					scale = scaleY;
					
//					trace("Scaled 41 = "  + (41*scale).toString());
//					trace("Scaled 20 = "  + (20*scale).toString());
//					trace("RSS Width, headtext: " + this.headtext.width);
//					trace("RSS Width, bodytext: " + this.bodytext.width);
//					
//					trace("Text Width, headtext: " + this.headtext.measuredMinWidth);
//					trace("Text Width, bodytext: " + this.bodytext.measuredMinWidth);
					
					this.headtext.setStyle("fontSize", (Math.floor(39*scale)).toString());
					this.bodytext.setStyle("fontSize", (Math.floor(20*scale)).toString());
					
					this.headtext.y = 4*scale - 2;
					this.bodytext.y = this.headtext.y + this.headtext.measureText(this.headtext.text).height - 6;
					
					var adjustingFonts:Boolean = true;
					do {					
						if ( this.bodytext.text != "" && this.bodytext.y + this.bodytext.measureText(this.bodytext.text).height > this.headline.height ) {
							var fontSize:Number = Number(this.headtext.getStyle("fontSize"));
							
							fontSize -= 1;
							this.headtext.setStyle("fontSize", fontSize.toString());
							this.bodytext.y = this.headtext.y + this.headtext.measureText(this.headtext.text).height - 6;
//							Logger.addEvent("re-adjusting fonts");
						} else {
							adjustingFonts = false;
						}
					} while( adjustingFonts && fontSize > 2 )


					this.headtext.width = headline.width;
					this.bodytext.width = headline.width;
					
					this.resizing = false;
				}
			}
			
			private function RSSLoadBegin():void {
				var _loaderReq:URLRequest;

				if (_loader == null) {
					_loader = new URLLoader();
					_loader.dataFormat = URLLoaderDataFormat.TEXT;
					_loader.addEventListener(Event.COMPLETE,OnRSSLoadComplete,false,0,true);
					_loader.addEventListener(IOErrorEvent.IO_ERROR,OnIOError,false,0,true);
				}
				
				_loaderReq = new URLRequest(this.source);
//				_loaderReq.setLoginCredentials("development","mils0ft");

				_loader.load(_loaderReq);
			}
			
			private function OnIOError(e:IOErrorEvent):void {
				Logger.addEvent("RSS FAILED: Probably not connected");
				_reloadTimer.delay = 5*1000;
				_reloadTimer.start();
				this.visible = false;
			}
		 

			
			private function OnReloadTimer(e:TimerEvent):void {
				RSSLoadBegin();
			}
			
			private function OnRSSLoadComplete(e:Event):void {
				_reloadTimer.delay = 10*60*1000;
				_reloadTimer.start();
				this.visible = true;
				this.logo.source = this.logoUrl;
				
				var tmpRSS:XML = new XML(_loader.data); // Load data into a temp variable
				
				if (new XMLList(tmpRSS.channel.item).length() == 0) {
					// No data loaded, or data is empty....
					tmpRSS = new XML();
					
					
					// If the last update was more than 24 Hours ago, then set RSS to an empty one
					if (new Date().getTime() - this._lastUpdateDate.getTime() > 24*60*60*1000) {
						this._RSSXML = tmpRSS;
						this._currentHeadline = 0;
					}
				} else {
					this._lastUpdateDate = new Date();
					
					if (tmpRSS.toString() == this._RSSXML.toString()) {
						// Do nothing as XML was not updated
					} else {
						var _timerstopped:Boolean = false;
						if( this._timer.running ) {
							this._timer.stop();
						}
						
						this._RSSXML = tmpRSS;
						this._currentHeadline = 0;
						
						if ( _timerstopped ) {
							this._timer.start();
						}
					}
					
				}
				
				
				this._RSSXML = new XML(_loader.data);
				
				this._currentHeadline = -1;
				
				this.play_next();
//				channel.item
//					->title
//					->description
			}
			
			private function OnTimer(e:TimerEvent):void {
				this._timer.stop();
				
				play_next();
			}
			
			private function play_next():void {
				var MoveTween:Move 
				
				if (MoveTween == null) {
					MoveTween = new Move();
				}
				
				MoveTween.yFrom = headline.y;
				MoveTween.yTo = this.height;
				
				MoveTween.addEventListener(EffectEvent.EFFECT_END,play_next_stage2,false,0,true);
				
				MoveTween.play([headline]);
			}
			
			private function next_headline():void {
				var headlineIndex:int = this._currentHeadline;
				
				do {
					this._currentHeadline += 1;
					if (this._currentHeadline > new XMLList(this._RSSXML.channel.item).length() - 1) {
						this._currentHeadline = 0;
					}	
				} while(headlineIndex != this._currentHeadline && this._RSSXML.channel.item[this._currentHeadline].description == "")
				 			
			}
			
			private function prev_headline():void {
				var headlineIndex:int = this._currentHeadline;
				
				do {
					this._currentHeadline -= 1;
					if (this._currentHeadline < 0) {
						this._currentHeadline = new XMLList(this._RSSXML.channel.item).length() - 1;
					}	
				} while(headlineIndex != this._currentHeadline && this._RSSXML.channel.item[this._currentHeadline].description == "")
				 			
			}

			
			private function play_next_stage2(e:EffectEvent):void {
				
				next_headline();
								
				if (new XMLList(this._RSSXML.channel.item).length() == 0) {
					headtext.text = this.source;
					bodytext.text = "Actualizando..."
				} else {
					headtext.text = this._RSSXML.channel.item[this._currentHeadline].title;
					bodytext.text = this._RSSXML.channel.item[this._currentHeadline].description;
				}
				
				this.truncateText(headtext, this.headline.width);
				this.truncateText(bodytext, this.headline.width);
				
//				Logger.addEvent("Head: "+ headtext.text);
//				Logger.addEvent("Body: " + bodytext.text); 
				Move(e.target).removeEventListener(EffectEvent.EFFECT_END,play_next_stage2);
				
				this.resize();
				
				Move(e.target).yTo = Move(e.target).yFrom;
				Move(e.target).yFrom = headline.y;
				Move(e.target).play([headline]);
				
				this._timer.start();
			}
			
			
			// This function truncates text in bodytext and headertext
			private function truncateText(obj:Label, width:Number):void {
				var txtWidth:Number;
				var txt:String;
				var txtArr:Array;
				
				txt = obj.text;
//				Logger.addEvent("Truncate Text In: " + txt);
				txtWidth = obj.measureText(txt).width;
				
				while ( txtWidth > width && txt.length > 5 ) {
					txtArr = txt.split(" ");
					txtArr.pop();
					
					txt = txtArr.join(" ") + "...";


					txtWidth = obj.measureText(txt).width;
				}
//				Logger.addEvent("Truncate Text Out: " + txt);
				
				obj.text = txt;
			}
			

		]]>
	</mx:Script>
	
	
	<mx:Canvas id="headline" left="Canvas1_col2:15" right="10" top="0" bottom="0" verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="#000000" backgroundAlpha="0.0">
		<mx:constraintColumns>
			<mx:ConstraintColumn id="Canvas12_col2" width="5%"/>
		</mx:constraintColumns>
		<mx:Label fontFamily="HelvNeueBlack" fontSize="41" color="#000000" id="headtext" fontWeight="normal" truncateToFit="false" y="10" left="1"/>
		<mx:Label text="" fontFamily="HelvNeueBlack" fontSize="20" color="#000000" id="bodytext" truncateToFit="false" y="53" left="1" alpha="0.45"/>
	</mx:Canvas>
	
</mx:Canvas>
