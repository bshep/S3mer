<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml" showStatusBar="false"
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" 
	visible="true" horizontalAlign="center" 
	verticalAlign="middle" cornerRadius="0" layout="absolute"
	backgroundColor="#FFFFFF"
	resize="onWindowResize(event)"
	 xmlns:ns1="com.msgid.S3mer.*">
	<mx:states>
		<mx:State name="loading">
			<mx:AddChild position="lastChild">
				<mx:Canvas id="LoadingCanvas" verticalScrollPolicy="off" horizontalScrollPolicy="off" visible="true" horizontalCenter="0" verticalCenter="0" width="320" height="240">
					<mx:SWFLoader id="myLoadingImage" source="assets/logo.swf" x="0" top="0" maintainAspectRatio="true"/>
					<mx:ProgressBar labelPlacement="bottom" id="myFileProgress" enabled="true" mode="manual" label=" " visible="false" bottom="10" right="10" left="10"/>
					<mx:ProgressBar labelPlacement="bottom" id="myTotalProgress" enabled="true" mode="manual" label=" " bottom="20" right="10" left="10"/>
					<mx:Label id="lblStatus" visible="false" left="0" right="0" color="#BDBDBD">
					</mx:Label>
				</mx:Canvas>
			</mx:AddChild>
			<mx:RemoveChild target="{_loginWindow}"/>
		</mx:State>
		<mx:State name="playing">
			<mx:RemoveChild target="{_loginWindow}"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Image;
			import mx.core.BitmapAsset;
			import mx.graphics.codec.PNGEncoder;
			import mx.graphics.codec.JPEGEncoder;
			import mx.events.EffectEvent;
			import mx.events.TweenEvent;
			import mx.events.ResizeEvent;
			import mx.managers.SystemManager;
			
			private var _screenNumber:int;
			private var _show:Show;
			private var _log:Logger = Logger.instance;
			private var _configuration:ConfigurationManager;
			private var _fader:FadePanel;
			private var _stopped:Boolean = true;
			private var _owner:S3mer;
			private var _multiScreen:Boolean;
			
			public function set show(myShow:Show):void {
				this._show = myShow;
				
				this.onWindowResize(null);
			}
			public function get show():Show{
				return _show;
			}
			
			public function get screenId():int {
				return this._screenNumber;
			}
			
			public function set ObjOwner(myOwner:S3mer):void {
				this._owner = myOwner;
			}
			
			public function get configuration():ConfigurationManager {
				return this._configuration;
			}
			
			public function set stopped(value:Boolean):void {
				_stopped = value;
			}
			
			public function get channelId():String {
				return this._configuration.channelId;		
			}

			
			//Receives screenNumber in which to display this screen, returns screenNumber or -1
			public function setScreen(screenNumber:int):int {
				var _screen:Screen;
				
				if ( screenNumber >= Screen.screens.length ) {
					return -1;
				} 
				
				_screen = Screen.screens[screenNumber];
				
				this.bounds = _screen.bounds;
				this._screenNumber = screenNumber;
				
				return screenNumber;
			}
			
			public function getScreen():int {
				return this._screenNumber;
			}
			
			public function showWindow():void {
				var _screen:Screen = Screen.screens[this._screenNumber];
				
				this.setStyle("backgroundColor","#FFFFFF");				
				this.visible = true;

				this.move(_screen.bounds.x,_screen.bounds.y);
				
				this.title = "Screen #" + this._screenNumber;
//				this.screenNumber.text = "Screen #" + this._screenNumber;
				this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
//				this.stage.scaleMode = StageScaleMode.SHOW_ALL;

				this.currentState = "";
			}
			
			public function enableKeyHandler():void {
				
				if(this.stage) {
					if ( !this.stage.willTrigger(KeyboardEvent.KEY_UP) ) {
						this.stage.addEventListener(KeyboardEvent.KEY_UP,HandleKeyUp,false,0,true);
					}
				}
			}
			
			public function disableKeyHandler():void {
				this.stage.removeEventListener(KeyboardEvent.KEY_UP,HandleKeyUp);				
			}
			
			private function HandleKeyUp(e:KeyboardEvent):void {
				KeyboardManager.HandleKeyUp(e,this);
			}
						
			private function onWindowResize(e:ResizeEvent):void {
				Logger.addEvent("Screen #" + this._screenNumber + " size is: " + this.width + "x" + this.height);
				
				if( this._show != null ) {
					Logger.addEvent("Screen #" + this._screenNumber + ": resizing");
					this._show.width = this.width;
					this._show.height = this.height;
					this._show.resize();
				} else {
					Logger.addEvent("Screen #" + this._screenNumber + ": NOT resizing, show is null");
				}
			}
			
			public function loadConfiguration(multiScreen:Boolean):void {
				this.currentState = "loading";

				this._multiScreen = multiScreen;

				this.setStyle("backgroundColor","#FFFFFF");				
				
//				myLoadingImage.maintainAspectRatio = true;

//				LoadingCanvas.visible = true;

				this._configuration = new ConfigurationManager(this, multiScreen);
				
				this._configuration.addEventListener(ConfigurationEvent.UPDATED, OnConfigurationUpdate,false,0,true);
				this._configuration.addEventListener(DownloaderEvent.PARTIAL_COMPLETE, OnDownloadProgress,false,0,true);
				this._configuration.addEventListener(DownloaderEvent.PROGRESS, OnDownloadProgress,false,0,true);				
				
				this._configuration.updateConfiguration();
				
			}
			
			public function play():void {
				this.currentState = "playing";
				this._stopped = false;
				this._configuration.play();
			}
			
			public function stop():void {
				this._configuration.stop();
			}

			private function OnConfigurationUpdate(e:ConfigurationEvent):void {
				if (this.currentState == "loading") {
					this.currentState = "playing";
					myFileProgress.setProgress(100,100);
					myTotalProgress.setProgress(100,100);
					
					_fader = new FadePanel();
					
					_fader.setup(this);
					_fader.addEventListener(EffectEvent.EFFECT_END, OnFadeComplete);
	
					_fader.fadeOut(250);
				} else {
					this.setStyle("backgroundColor","#000000");
					this.play();
				}
				
				this.enableKeyHandler();
			}
			
			private var pictureTimer:Timer;

			private function snagPic(e:Event):void {
				return;
				
				var bitmapData:BitmapData;
				var newImage:File;
				var fileStream:FileStream;
				
				bitmapData = new BitmapData(this.width,this.height,false,0x00000000);
				bitmapData.draw(this,new Matrix());
				var bitmap:Bitmap = new Bitmap(bitmapData);

				this._notificationPanel.showNotification("Thumbnail");				
				
				var jpg:PNGEncoder = new PNGEncoder();
				
				var ba:ByteArray = jpg.encode(bitmapData);
//				var ba:ByteArray = bitmap..encode(bitmapData);
				newImage = File.applicationStorageDirectory.resolvePath("cap"+ this._screenNumber +".png");
				fileStream = new FileStream();
				fileStream.open(newImage, FileMode.UPDATE);
				fileStream.writeBytes(ba);
				fileStream.close();
			}
			
			private function OnFadeComplete(e:EffectEvent):void {
				_fader.removeEventListener(EffectEvent.EFFECT_END, OnFadeComplete);
				_fader.addEventListener(EffectEvent.EFFECT_END, OnFadeComplete_stage2);
				
				Logger.addEvent("Current BKG Color : " + this.getStyle("backgroundColor"));
				this.setStyle("backgroundColor","#000000");
				Logger.addEvent("Current BKG Color : " + this.getStyle("backgroundColor"));
				this.currentState = "";
				
				_fader.fadeIn(100);
			}
			
			private function OnFadeComplete_stage2(e:EffectEvent):void {
				_fader.removeEventListener(EffectEvent.EFFECT_END, OnFadeComplete_stage2);
				try {
					this.removeChild(_fader);
				} catch(e:Error) {
					
				}
							
				if (this._stopped == true) {
					this._stopped = false;
					this.play();
				}
				
				pictureTimer = new Timer(1000,1);
				pictureTimer.addEventListener(TimerEvent.TIMER,snagPic);
				pictureTimer.start();
			}
			
			private function OnDownloadProgress(e:DownloaderEvent):void {
				this.myTotalProgress.setProgress(DownloadQueue(e._downloader).percent,100);
			}

			public function reloadApp():void {
				this._owner.reloadApp();
			}
			
			public function resetApp():void {
				this._owner.resetApp();
			}
			
			public function doReload():void {
				this._show.reset();
				this._show.removeAllChildren();
				this.removeChild(this._show);
				this.setStyle("backgroundColor","#FFFFFF");				
										
				this.loadConfiguration(this._multiScreen);
			}
			
//			public function doReset22():void {
//				if( this._show != null ) {				
//					try {
//						this._show.reset();
//						this._show.removeAllChildren();
//						this.removeChild(this._show);
//					} catch(e:Error) {
//						
//					}
//				}
//				
//				this._configuration.stopDownloads();
//				this.currentState = "";
//								
//				this.setStyle("backgroundColor","#FFFFFF");				
//										
//			}

			public function redoInitialSetup():void {
				this._owner.doInitialSetup(true);
			}
			
			public function cleanMediaDirectory():void {
				this._configuration.cleanupMedia();	
			}
			
		]]>
	</mx:Script>
	
	<ns1:NotificationPanel id="_notificationPanel" right="10" top="10" visible="false" />
	<ns1:LoginWindow id="_loginWindow" alpha="0.0" horizontalCenter="0" verticalCenter="0" visible="false" />
</mx:Window>
