<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="251" height="81" backgroundAlpha="0.0" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	resize="resize()">
	<mx:Style>
		@font-face {
		    src:url("assets/Helvetica Neue Condensed Black.ttf");
		    fontFamily: HelvNeueBlack;
		}
	</mx:Style>

	<mx:Script>
		<![CDATA[
			import mx.formatters.DateFormatter;
			
			private var _timer:Timer;
			private const _origWidth:int = 251;
			private const _origHeight:int = 81;
			private var resizing:Boolean = false;
			
			public function play():void {
				setupTimer();
				update();
				_timer.start();
			}
			
			public function resize():void {
				if ( this.resizing == false ) {
					this.resizing = true;
					var scaleX:Number = (this.width / this._origWidth);
					var scaleY:Number = (this.height / this._origHeight);
					
					var scale:Number;
					
					if (scaleX >scaleY ) {
						scale = scaleY;
					} else {
						scale = scaleX;
					}
					
					scale = scaleY;
					
					this.txtTime.setStyle("fontSize", (Math.floor(43*scale)).toString());
					this.txtDate.setStyle("fontSize", (Math.floor(20*scale)).toString());
					
					this.txtDate.y = 8*scale + 5;
					this.txtTime.y = this.txtDate.y + this.txtDate.measureText(this.txtDate.text).height - 8;
					
					var adjustingFonts:Boolean = true;
					do {					
						if ( this.txtTime.y + this.txtTime.measureText(this.txtTime.text).height > this.height ) {
							var fontSize:Number = Number(this.txtDate.getStyle("fontSize"));
							
							fontSize -= 1;
							this.txtDate.setStyle("fontSize", fontSize.toString());
							this.txtTime.y = this.txtDate.y + this.txtDate.measureText(this.txtDate.text).height - 8;
//							Logger.addEvent("re-adjusting fonts");
						} else {
							adjustingFonts = false;
						}
					} while( adjustingFonts && fontSize > 2 )


					this.txtTime.width = this.width;
					this.txtDate.width = this.width;
					
					this.resizing = false;
				}
			}

			
			private function setupTimer():void {
				if (_timer == null) {
					_timer = new Timer(60*1000);
					_timer.addEventListener(TimerEvent.TIMER, OnTimer,false,0,true);
				}
			}
			
			private function OnTimer(e:TimerEvent):void {
				this._timer.stop();
				this.update();
				this._timer.start();
			}
			
			private function update():void {
				var datenow:Date = new Date();
				var df:DateFormatter = new DateFormatter();
				
				df.formatString = "MMMM D";
				
				this.txtDate.text = df.format(datenow).toUpperCase();
				
				df.formatString = "L:NN A";
				this.txtTime.text = df.format(datenow).toUpperCase();
				
				this._timer.delay = (60 - datenow.getSeconds())*1000;
			}
			
			public function stop():void {
				this._timer.stop();
			}
			
			
		]]>
	</mx:Script>
	<mx:Label id="txtDate" fontFamily="HelvNeueBlack" text="December 11" fontSize="20" width="160" color="#FFFFFF" y="8" x="10"/>
	<mx:Label id="txtTime" fontFamily="HelvNeueBlack" text="4:27 PM" fontSize="45" left="10" bottom="0" width="231" color="#FFFFFF"/>
		
		
</mx:Canvas>
