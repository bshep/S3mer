<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="650" height="232"
	creationComplete="onCreate(event)"
	addedToStage="txtUsername.setFocus();"
	currentState="Login"
	close="Application.application.exit()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">

	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.collections.ArrayCollection;
		
			import air.update.events.DownloadErrorEvent;
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
		
			import mx.states.State;
			import mx.core.Window;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.controls.Alert;
			import mx.messaging.channels.StreamingAMFChannel;
			
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var _username:String;
			private var _password:String;
			private var _params:URLVariables = new URLVariables();
			private var _uploading:Boolean = false;
			
			[Bindable]
			private var _folderList:ArrayCollection;
			
			[Bindable]
			private var _uploadQueue:ArrayCollection = new ArrayCollection();
			
			private var LOGIN_URL:String = "http://www.s3mer.com/flex_uploader/login.php?";
			private var PROCESS_CMD_URL:String = "http://www.s3mer.com/process_command.php?commandnr=save-media-data";
			private var SET_FOLDER_URL:String = "http://www.s3mer.com/process_command.php?commandnr=set-library-folder";
			private var GET_FOLDER__LIST_URL:String = "http://www.s3mer.com/flex_uploader/remoteprocedures.php?action=folder-list";
			private var PARAMS_URL:String = "http://www.s3mer.com/sign.php?uploader";
			
			
			//process_command.php?commandnr=save-media-data&filename=' + fileObj.name + '&filesize=' + fileObj.size
			
			private function getLoginURL():String {
				var url:String;
				
				url = LOGIN_URL + "username=" + this._username + "&password=" + this._password;
				
				return url;
			}
			
			private function getProcessURL(filename:String, size:String):String {
				var url:String;
				var urlVariables:URLVariables = new URLVariables();
				
				urlVariables["filename"] = filename;
				urlVariables["filesize"] = size;
				
				url = PROCESS_CMD_URL + "&" + urlVariables.toString();
				
				return url;
			}
			
			private function getLibraryFolderURL(folder:String):String {
				var url:String;
				var urlVariables:URLVariables = new URLVariables();
				
				urlVariables["folder"] = folder;
				
				url = SET_FOLDER_URL + "&" + urlVariables.toString();
				
				return url;
			}
			
			
			
			private function checkLogin(e:Event):void {
				if(txtUsername.text == "" || txtPassword.text == "") {
//					Alert.show("Please enter your credentials","Login Error");
					return;
				}
				
				if(_username != txtUsername.text || _password != txtPassword.text) {
					this._username = txtUsername.text;
					this._password = txtPassword.text;
										
					doRequest(getLoginURL(), checkLogin_complete, checkLogin_error);
					
					// Disable login controls give status
					status = "Loggin in";
					txtPassword.enabled = false;
					txtUsername.enabled = false;
					btnLogin.enabled = false;
					
				} 
			}
			
			private function checkLogin_complete(e:Event):void {
				var txt:String;
				
				txt = (e.target as URLLoader).data;
				
				if(txt == "1") {
					trace("Logged in");
					
					saveCredentials();
					loadPostParams();
					loadLibraryFolderList();
					setLibraryFolder("All");
					
					currentState = "IdleView";
					status = "Logged in as: " + _username;
				} else {
					trace("Login Failed");
					if(txt == "2") {
						Alert.show("Only available to pro users","Login Error");
					} else {
						Alert.show("Check your credentials","Login Error");						
					}
					status = "Try Again";
					txtPassword.enabled = true;
					txtUsername.enabled = true;
					btnLogin.enabled = true;
					this._username = "";
					this._password = "";
				}
			}
			
			private function checkLogin_error(e:IOErrorEvent):void {
				Alert.show("Could not login","Login Error");
				status = "Try Again";
				txtPassword.enabled = true;
				txtUsername.enabled = true;
				btnLogin.enabled = true;
			}
			
			private function loadPostParams():void {
				doRequest(PARAMS_URL, loadPostParams_complete, loadPostParams_error);
			}
			
			private function loadPostParams_complete(e:Event):void {
				var txt:String;
				var params:Array;
				var parts:Array;
				
				txt = (e.target as URLLoader).data;
				
				params = txt.split(",");
				
				for each( var param:String in params ) {
					parts = param.split(":");

					parts[0] = (parts[0] as String).replace(/^\"/,"");
					parts[0] = (parts[0] as String).replace(/\"$/,"");
					parts[1] = (parts[1] as String).replace(/^ \"/,"");
					parts[1] = (parts[1] as String).replace(/\"$/,"");
					
					this._params[parts[0]] = parts[1];
				}

				enableUploadButton();
			}
			
			private function loadPostParams_error(e:IOErrorEvent):void {
				Alert.show("Could not get post params","Params Error");
			}


			private function saveCredentials():void {
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTFBytes(_username);
				EncryptedLocalStore.setItem("username", bytes);
				
				bytes.clear();
				
				bytes.writeUTFBytes(_password);
				EncryptedLocalStore.setItem("password", bytes);				
				
			}
			
			private function loadCredentials():void {
				var bytes:ByteArray;
				
				bytes = EncryptedLocalStore.getItem("username");
				
				if(bytes != null) {
					txtUsername.text = bytes.readUTFBytes(bytes.length);
					//txtUsername.text = _username;
				}
				
				bytes = EncryptedLocalStore.getItem("password");
				
				if(bytes != null) {
					txtPassword.text = bytes.readUTFBytes(bytes.length);
					//txtPassword.text = _password;
				}
				
				checkLogin(null);
			}
			
			// *** Start Here ***
			private function onCreate(e:Event):void {
				loadCredentials();
				chkAOT.addEventListener(Event.CHANGE, aotHandler);
				txtUsername.addEventListener(KeyboardEvent.KEY_DOWN, returnKeyHandler);
				txtPassword.addEventListener(KeyboardEvent.KEY_DOWN, returnKeyHandler);
				
				// updater stuff
			    appUpdater.updateURL = "http://www.s3mer.com/app/s3merStandaloneUploader_updateDescriptor.xml";
			    appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdateInitialized);
			    appUpdater.addEventListener(ErrorEvent.ERROR, onUpdateError);
			    appUpdater.isCheckForUpdateVisible = false;
			    appUpdater.isFileUpdateVisible = false;
			    appUpdater.isInstallUpdateVisible = true;
			    appUpdater.initialize();
			}
			
			private function onUpdateInitialized(event:UpdateEvent):void
			{
				appUpdater.checkNow();
			}
			
			private function onUpdateError(event:ErrorEvent):void
			{
            	Alert.show('Contact us s3mer.team@s3mer.com and report this\n\n' + event.toString(), 'Updater Error');
			}
			
			private function aotHandler(e:Event):void {
				if(chkAOT.selected) {
					currentState = "AOT";
					application.alwaysInFront = true;
				} else {
					application.alwaysInFront = false;
					currentState = "IdleView";
					evaluateState();
				}
			}
			
			private function returnKeyHandler(e:KeyboardEvent):void {
				if(e.keyCode == 13) {
					if( e.currentTarget == txtUsername ) {
						txtPassword.setFocus();
					} else {
						checkLogin(null);
					}
					trace("Hit return");
				}
			}
			
			private function dragEnterHandler(e:NativeDragEvent):void {
				trace("Drag Enter");
				DragManager.acceptDragDrop(btnUpload);
				btnUpload.setStyle('borderColor', '#FFFFFF');
			}
			
			private function dragDropHandler(e:NativeDragEvent):void {
				var fileArray:Array;
				
				fileArray = (e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array);
				
				addFilesToQueue(fileArray);
				btnUpload.setStyle('borderColor', '#909090');

//				e.clipboard
				trace("Drag Drop");
			}
			
			private function dragExitHandler(e:NativeDragEvent):void {
				btnUpload.setStyle('borderColor', '#909090');
			}
			
			private function addFilesToQueue(fileArray:Array):void {
				var tmpFileObj:FileObject;
				
				for each( var file:File in fileArray) {
					
					if( file.isDirectory ) {
						addFilesToQueue(file.getDirectoryListing());
					} else {
						tmpFileObj = new FileObject(file);
						
						this._uploadQueue.addItem(tmpFileObj);
					}
				}
				
				updateProgressBars();
				startUploads();
			}
			
			private function startUploads():void {
				var _urlRequest:URLRequest;
				var _urlVariables:URLVariables;
				var _fileObj:FileObject;
					
				_fileObj = null;
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if(fileObj.canUpload) {
						_fileObj = fileObj;
						break; //Break out of the loop when we find the first file
					}
				}
				
				if(_fileObj == null) { //No more files
					return;
				}

				if(this._uploading) {
					return;
				}				
				
				evaluateState();
				
				this._uploading = true;
				
				_urlVariables = new URLVariables(this._params.toString());
				
				_urlVariables["key"] = _urlVariables["key"] + _fileObj.file.name;

				_urlRequest = new URLRequest("http://media1.s3mer.com.s3.amazonaws.com/");
				_urlRequest.method = URLRequestMethod.POST;
				_urlRequest.data = _urlVariables;
				
				_fileObj.file.addEventListener(ProgressEvent.PROGRESS, upload_progress);
				_fileObj.file.addEventListener(Event.COMPLETE, upload_complete);
				_fileObj.file.addEventListener(IOErrorEvent.IO_ERROR, upload_error);
				
				_fileObj.uploading = true;
				_fileObj.urlRequest = _urlRequest;
				_fileObj.file.upload(_urlRequest,"file");
				
				
			}
			
			private function upload_progress(e:ProgressEvent):void {
				var _file:File = e.target as File;
				
				
				pbFile.setProgress(e.bytesLoaded, e.bytesTotal);
				pbFile.label = "Current File: " + _file.name + " " + e.bytesLoaded + "/" + e.bytesTotal + " (" + Math.round((e.bytesLoaded/e.bytesTotal)*100) + "%)";
			}
			
			private function upload_complete(e:Event):void {
				var _file:File = e.target as File;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.file == e.target ) {
						fileObj.complete = true;
						fileObj.uploading = false;
					}
				}
				
				pbFile.label = "Current File: " + _file.name + " " + _file.size + "/" + _file.size + " (100%)";
				addToDatabase(e.target as File);
				
				evaluateState();
			}
			
			private function updateProgressBars(alert:Boolean = true):void {
				var completeFiles:int;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.complete ) {
						completeFiles++;
					}
				}
				
				pbTotal.setProgress(completeFiles, this._uploadQueue.length);
				pbTotal.label = "Total Progress: " + completeFiles + "/" + this._uploadQueue.length + " files complete.";
				
				if( completeFiles == this._uploadQueue.length && alert) {
					Alert.show("Completed", "Uploads");
				}
			}
			
			private function upload_error(e:IOErrorEvent):void {
				var _file:File = e.target as File;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.file == e.target ) {
						fileObj.error = true;
					}
				}

				Alert.show("Error uploading file","Upload Error");
				this._uploading = false;
				startUploads();
				trace("Error Uploading");
			}
			
			private function addToDatabase(file:File):void {
				doRequest(getProcessURL(file.name, file.size.toString()), addToDatabase_complete, addToDatabase_error);
			}
			
			private function addToDatabase_complete(e:Event):void {				
				updateProgressBars();
				this._uploading = false;
				startUploads();
			}
			
			private function addToDatabase_error(e:IOErrorEvent):void {
				Alert.show("Error adding to DB","DB Error");				
			}
			
			private function setLibraryFolder(folder:String):void {
				doRequest(getLibraryFolderURL(folder), setLibraryFolder_complete, setLibraryFolder_error);
			}
			
			private function setLibraryFolder_complete(e:Event):void {				
				trace("Library Folder Set");
			}
			
			private function setLibraryFolder_error(e:IOErrorEvent):void {
				Alert.show("Error setting library folder","API Error");				
			}

			private function loadLibraryFolderList():void {
				doRequest(GET_FOLDER__LIST_URL, loadLibraryFolderList_complete, loadLibraryFolderList_error);
			}
			
			private function loadLibraryFolderList_complete(e:Event):void {
				var _listXML:XML = new XML((e.target as URLLoader).data);
				
				this.cmbFolders.dataProvider = _listXML.item;
				
				trace("Library Folder Get");
			}
			
			private function loadLibraryFolderList_error(e:IOErrorEvent):void {
				Alert.show("Error getting library folder list","API Error");				
			}
			
			private function selectFolder(event:Event):void {
				var index:String;
				
				index = cmbFolders.selectedItem.@id.toString();
				
				if( index == "0" ) {
					setLibraryFolder("All");
				} else {
					setLibraryFolder("mediafolder_"+index);
				}
				
			}

			
			private function onLogout(e:Event):void {
				this._username = "";
				this._password = "";
				saveCredentials();
				
				txtUsername.text = "";
				txtPassword.text = "";
				
				disableUploadButton();
				currentState = "Login";
				// Enable login controls give status
				status = "";
				txtPassword.enabled = true;
				txtUsername.enabled = true;
				btnLogin.enabled = true;
			}
			
			private function disableUploadButton():void {
				btnUpload.enabled = false;
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, dragExitHandler);		
			}
			
			private function enableUploadButton():void {
				btnUpload.enabled = true;
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, dragExitHandler);
			}
			
			private function doRequest(url:String, complete:Function, error:Function):void {
				var urlRequest:URLRequest = new URLRequest()
				var urlLoader:URLLoader;

				urlRequest.url = url;
				urlLoader  = new URLLoader()
				urlLoader.addEventListener(Event.COMPLETE, complete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, error);
				
				urlLoader.load(urlRequest);
			}
			
			private function extendedView_enter(event:FlexEvent):void {
				lstQueue.addEventListener(QueueEvent.DELETE, deleteQueueItem);
			}
			
			private function extendedView_exit(event:FlexEvent):void {
				lstQueue.removeEventListener(QueueEvent.DELETE, deleteQueueItem);				
			}
			
			private function deleteQueueItem(event:QueueEvent):void {
				this._uploadQueue.removeItemAt(this._uploadQueue.getItemIndex(event.fileObject));
				updateProgressBars();
			}
			
			private function evaluateState():void {
				if( this.currentState == "AOT" ) {
					//Do nothing
				} else {
					if( this._uploadQueue.length == 0) {
						this.currentState = "IdleView";
					} else {
						this.currentState = "ExtendedView";
					}
					
				}
				
			}
			
			private function clearCompleted():void {
				var fileObj:FileObject;
				
				for(var index:int = this._uploadQueue.length-1; index >= 0; index-- ) {
					fileObj = this._uploadQueue.getItemAt(index) as FileObject;
					
					if( fileObj.complete ) {
						this._uploadQueue.removeItemAt(index);
					}
				}
				updateProgressBars(false);
				evaluateState();
			}
		]]>
	</mx:Script>
	<mx:Style source="style/style.css"/>
	<mx:states>
		<mx:State name="Login">
			<mx:RemoveChild target="{pbTotal}"/>
			<mx:RemoveChild target="{pbFile}"/>
			<mx:AddChild position="lastChild">
				<mx:Form verticalCenter="0" horizontalCenter="0">
					<mx:FormItem label="Username">
						<mx:TextInput id="txtUsername"/>
					</mx:FormItem>
					<mx:FormItem label="Password">
						<mx:TextInput id="txtPassword" displayAsPassword="true"/>
					</mx:FormItem>
					<mx:FormItem>
						<mx:Button label="Login" id="btnLogin" click="checkLogin(event)"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:RemoveChild target="{applicationcontrolbar1}"/>
			<mx:RemoveChild target="{btnUpload}"/>
			<mx:SetProperty name="height" value="165"/>
		</mx:State>
		<mx:State name="AOT">
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{pbTotal}"/>
			<mx:RemoveChild target="{pbFile}"/>
			<mx:SetProperty name="width" value="304"/>
			<mx:SetProperty name="height" value="246"/>
			<mx:SetProperty target="{btnUpload}" name="width" value="282"/>
			<mx:SetProperty target="{btnUpload}" name="y" value="40"/>
			<mx:SetProperty target="{btnUpload}" name="height" value="179"/>
			<mx:SetProperty target="{label1}" name="x" value="50.5"/>
			<mx:SetProperty target="{label1}" name="y" value="73"/>
		</mx:State>
		<mx:State name="ExtendedView" enterState="extendedView_enter(event)" exitState="extendedView_exit(event)">
			<mx:SetProperty name="height" value="375"/>
			<mx:AddChild position="lastChild">
				<mx:List  id="lstQueue" itemRenderer="QueueItem" dataProvider="{_uploadQueue}" bottom="40" offscreenExtraRowsOrColumns="5" left="10" right="10" top="172"></mx:List>
			</mx:AddChild>
			<mx:SetProperty target="{pbTotal}" name="y"/>
			<mx:SetProperty target="{pbTotal}" name="visible" value="true"/>
			<mx:AddChild position="lastChild">
				<mx:Button label="Clear Completed" bottom="10" right="10" click="clearCompleted()"/>
			</mx:AddChild>
			<mx:SetProperty target="{pbTotal}" name="x"/>
			<mx:SetStyle target="{pbTotal}" name="left" value="10"/>
			<mx:SetProperty target="{pbTotal}" name="width"/>
			<mx:SetStyle target="{pbTotal}" name="right" value="10"/>
			<mx:SetProperty target="{label1}" name="x"/>
			<mx:SetStyle target="{label1}" name="horizontalCenter" value="0"/>
			<mx:SetProperty target="{label1}" name="y"/>
			<mx:SetStyle target="{label1}" name="verticalCenter" value="0"/>
			<mx:SetProperty target="{btnUpload}" name="x"/>
			<mx:SetProperty target="{btnUpload}" name="y"/>
			<mx:SetStyle target="{btnUpload}" name="top" value="43"/>
			<mx:SetStyle target="{btnUpload}" name="horizontalCenter" value="0"/>
			<mx:SetStyle target="{pbTotal}" name="top" value="136"/>
			<mx:SetStyle target="{pbTotal}" name="color" value="#6D6D6D"/>
		</mx:State>
		<mx:State name="IdleView">
			<mx:SetProperty name="height" value="165"/>
			<mx:SetProperty name="width" value="650"/>
		</mx:State>
	</mx:states>
	<mx:ProgressBar labelPlacement="top" label="Current File" id="pbFile" indeterminate="false" minimum="0" maximum="100" enabled="true" mode="manual" width="628" x="10" height="28" y="136" color="#000000" visible="false"/>
	<mx:ProgressBar labelPlacement="top" label="Total Progress" id="pbTotal" indeterminate="false" minimum="0" maximum="100" enabled="true" mode="manual" width="628" x="10" height="28" y="172" color="#000000" visible="false"/>
	<mx:ApplicationControlBar id="applicationcontrolbar1" cornerRadius="0" right="0" left="0" top="0">
		<mx:CheckBox label="Always On Top" id="chkAOT" width="111" height="22">
			<mx:toolTip>Select this option to keep the window always on top.</mx:toolTip>
		</mx:CheckBox>
		<mx:Spacer width="100%"/>
		<mx:ComboBox id="cmbFolders" labelField="@name" change="selectFolder(event)"></mx:ComboBox>
		<mx:Button label="Logout" click="onLogout(event)" toolTip="Click here to logout and clear the settings" id="button1" width="74" height="22"/>
	</mx:ApplicationControlBar>
	<mx:Canvas x="10" y="43" width="628" height="85" label="Drop Files Here" id="btnUpload" backgroundColor="#464646" borderColor="#4E4E4E">
		<mx:Label x="233.5" y="30" text="Drop Files Here" id="label1" fontSize="20" color="#6D6D6D"/>
	</mx:Canvas>
</mx:WindowedApplication>
