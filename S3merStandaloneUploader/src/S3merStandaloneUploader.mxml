<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="650" height="232"
	creationComplete="onCreate(event)"
	currentState="Login"
	backgroundGradientAlphas="[1.0, 1.0]"
	backgroundGradientColors="[#E4E4E4, #C1C1C1]">
	
	<mx:Script>
		<![CDATA[
			import mx.states.State;
			import mx.core.Window;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.controls.Alert;
			import mx.messaging.channels.StreamingAMFChannel;
			private var _username:String;
			private var _password:String;
			private var _params:URLVariables = new URLVariables();
			private var _uploading:Boolean = false;
			
			private var _uploadQueue:Array = new Array();
			
			private var LOGIN_URL:String = "http://www.s3mer.com/processlogin.php?";
			private var PROCESS_CMD_URL:String = "http://www.s3mer.com/process_command.php?commandnr=save-media-data";
			private var SET_FOLDER_URL:String = "http://www.s3mer.com/process_command.php?commandnr=set-library-folder";
			private var PARAMS_URL:String = "http://www.s3mer.com/sign.php?uploader";
			
			
			//process_command.php?commandnr=save-media-data&filename=' + fileObj.name + '&filesize=' + fileObj.size
			
			private function getLoginURL():String {
				var url:String;
				
				url = LOGIN_URL + "username=" + this._username + "&password=" + this._password;
				
				return url;
			}
			
			private function getProcessURL(filename:String, size:String):String {
				var url:String;
				var urlVariables:URLVariables = new URLVariables();
				
				urlVariables["filename"] = filename;
				urlVariables["filesize"] = size;
				
				url = PROCESS_CMD_URL + "&" + urlVariables.toString();
				
				return url;
			}
			
			private function getLibraryFolderURL(folder:String):String {
				var url:String;
				var urlVariables:URLVariables = new URLVariables();
				
				urlVariables["folder"] = folder;
				
				url = SET_FOLDER_URL + "&" + urlVariables.toString();
				
				return url;
			}
			
			
			
			private function checkLogin(e:Event):void {
				var urlRequest:URLRequest = new URLRequest()
				var urlLoader:URLLoader;
				
				if(txtUsername.text == "" || txtPassword.text == "") {
//					Alert.show("Please enter your credentials","Login Error");
					return;
				}
				
				if(_username != txtUsername.text || _password != txtPassword.text) {
					this._username = txtUsername.text;
					this._password = txtPassword.text;
					
					urlRequest.url = getLoginURL();
					urlLoader  = new URLLoader()
					urlLoader.addEventListener(Event.COMPLETE, checkLogin_complete);
					urlLoader.addEventListener(IOErrorEvent.IO_ERROR, checkLogin_error);
					
					urlLoader.load(urlRequest);
					
					// Disable login controls give status
					status = "Loggin in";
					txtPassword.enabled = false;
					txtUsername.enabled = false;
					btnLogin.enabled = false;
					
				} 
				
				
			}
			
			private function checkLogin_complete(e:Event):void {
				var txt:String;
				
				txt = (e.target as URLLoader).data;
				
				if(txt.search("s3mer - Players") > 0) {
					trace("Logged in");
					
					saveCredentials();
					loadPostParams();
					setLibraryFolder("All");
					
					currentState = "";
					status = "Logged in as: " + _username;
				} else {
					trace("Login Failed");
					Alert.show("Check your credentials","Login Error");
					status = "Try Again";
					txtPassword.enabled = true;
					txtUsername.enabled = true;
					btnLogin.enabled = true;
				}
			}
			
			private function checkLogin_error(e:IOErrorEvent):void {
				Alert.show("Could not login","Login Error");
			}
			
			
			private function uploadClick(e:MouseEvent):void {
				
			}
			
			private function loadPostParams():void {
				var urlRequest:URLRequest = new URLRequest()
				var urlLoader:URLLoader;
				
				urlRequest.url = this.PARAMS_URL;
				urlLoader  = new URLLoader()
				urlLoader.addEventListener(Event.COMPLETE, loadPostParams_complete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, loadPostParams_error);
				
				urlLoader.load(urlRequest);
					
			}
			
			private function loadPostParams_complete(e:Event):void {
				var txt:String;
				var params:Array;
				var parts:Array;
				
				txt = (e.target as URLLoader).data;
				
				params = txt.split(",");
				
				for each( var param:String in params ) {
					parts = param.split(":");

					parts[0] = (parts[0] as String).replace(/^\"/,"");
					parts[0] = (parts[0] as String).replace(/\"$/,"");
					parts[1] = (parts[1] as String).replace(/^ \"/,"");
					parts[1] = (parts[1] as String).replace(/\"$/,"");
					
					this._params[parts[0]] = parts[1];
				}

				enableUploadButton();
			}
			
			private function loadPostParams_error(e:IOErrorEvent):void {
				Alert.show("Could not get post params","Params Error");
			}


			private function saveCredentials():void {
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTFBytes(_username);
				EncryptedLocalStore.setItem("username", bytes);
				
				bytes.clear();
				
				bytes.writeUTFBytes(_password);
				EncryptedLocalStore.setItem("password", bytes);				
				
			}
			
			private function loadCredentials():void {
				var bytes:ByteArray;
				
				bytes = EncryptedLocalStore.getItem("username");
				
				if(bytes != null) {
					txtUsername.text = bytes.readUTFBytes(bytes.length);
					//txtUsername.text = _username;
				}
				
				bytes = EncryptedLocalStore.getItem("password");
				
				if(bytes != null) {
					txtPassword.text = bytes.readUTFBytes(bytes.length);
					//txtPassword.text = _password;
				}
				
				checkLogin(null);
			}
			
			// *** Start Here ***
			private function onCreate(e:Event):void {
				loadCredentials();
				chkAOT.addEventListener(Event.CHANGE, aotHandler);
				txtPassword.addEventListener(KeyboardEvent.KEY_DOWN, returnKeyHandler);
			}
			
			private function aotHandler(e:Event):void {
				if(chkAOT.selected) {
					currentState = "AOT";
					application.alwaysInFront = true;
				} else {
					currentState = "";
					application.alwaysInFront = false;
					application.width = 650;
					application.height = 232;
				}
			}
			
			private function returnKeyHandler(e:KeyboardEvent):void {
				if(e.keyCode == 13) {
					checkLogin(null);
					trace("Hit return");
				}
			}
			
			private function dragEnterHandler(e:NativeDragEvent):void {
				trace("Drag Enter");
				DragManager.acceptDragDrop(btnUpload);
				btnUpload.emphasized = true;
			}
			
			private function dragDropHandler(e:NativeDragEvent):void {
				var fileArray:Array;
				
				fileArray = (e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array);
				
				addFilesToQueue(fileArray);
				btnUpload.emphasized = false;

//				e.clipboard
				trace("Drag Drop");
			}
			
			private function dragExitHandler(e:NativeDragEvent):void {
				btnUpload.emphasized = false;
			}
			
			private function addFilesToQueue(fileArray:Array):void {
				var tmpFileObj:FileObject;
				
				for each( var file:File in fileArray) {
					
					if( file.isDirectory ) {
						addFilesToQueue(file.getDirectoryListing());
					} else {
						tmpFileObj = new FileObject(file);
						
						this._uploadQueue.push(tmpFileObj);
					}
				}
				
				updateProgressBars();
				startUploads();
			}
			
			private function startUploads():void {
				var _urlRequest:URLRequest;
				var _urlVariables:URLVariables;
				var _file:File;
					
				_file = null;
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if(fileObj.complete == false) {
						_file = fileObj.file;
						break; //Break out of the loop when we find the first file
					}
				}
				
				if(_file == null) { //No more files
					return;
				}

				if(this._uploading) {
					return;
				}				
				this._uploading = true;
				
				_urlVariables = new URLVariables(this._params.toString());
				
				_urlVariables["key"] = _urlVariables["key"] + _file.name;

				_urlRequest = new URLRequest("http://media1.s3mer.com.s3.amazonaws.com/");
				_urlRequest.method = URLRequestMethod.POST;
				_urlRequest.data = _urlVariables;
				
				_file.addEventListener(ProgressEvent.PROGRESS, upload_progress);
				_file.addEventListener(Event.COMPLETE, upload_complete);
				_file.addEventListener(IOErrorEvent.IO_ERROR, upload_error);
				
				_file.upload(_urlRequest,"file");
				
				
			}
			
			private function upload_progress(e:ProgressEvent):void {
				var _file:File = e.target as File;
				
				
				pbFile.setProgress(e.bytesLoaded, e.bytesTotal);
				pbFile.label = "Current File: " + _file.name + " " + e.bytesLoaded + "/" + e.bytesTotal + " (" + Math.round((e.bytesLoaded/e.bytesTotal)*100) + "%)";
			}
			
			private function upload_complete(e:Event):void {
				var _file:File = e.target as File;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.file == e.target ) {
						fileObj.complete = true;
					}
				}
				
				pbFile.label = "Current File: " + _file.name + " " + _file.size + "/" + _file.size + " (100%)";
				addToDatabase(e.target as File);
				
				
			}
			
			private function updateProgressBars():void {
				var completeFiles:int;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.complete ) {
						completeFiles++;
					}
				}
				
				pbTotal.setProgress(completeFiles, this._uploadQueue.length);
				pbTotal.label = "Total Progress: " + completeFiles + "/" + this._uploadQueue.length + " files complete.";
				
				if( completeFiles == this._uploadQueue.length ) {
					Alert.show("Completed", "Uploads");
				}
			}
			
			private function upload_error(e:IOErrorEvent):void {
				var _file:File = e.target as File;
				
				for each( var fileObj:FileObject in this._uploadQueue ) {
					if( fileObj.file == e.target ) {
						fileObj.complete = true;
					}
				}

				Alert.show("Error uploading file","Upload Error");
				this._uploading = false;
				startUploads();
				trace("Error Uploading");
			}
			
			private function addToDatabase(file:File):void {
				var urlRequest:URLRequest = new URLRequest()
				var urlLoader:URLLoader;

				urlRequest.url = getProcessURL(file.name, file.size.toString());
				urlLoader  = new URLLoader()
				urlLoader.addEventListener(Event.COMPLETE, addToDatabase_complete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, addToDatabase_error);
				
				urlLoader.load(urlRequest);
					
			}
			
			private function addToDatabase_complete(e:Event):void {				
				updateProgressBars();
				this._uploading = false;
				startUploads();
			}
			
			private function addToDatabase_error(e:IOErrorEvent):void {
				Alert.show("Error adding to DB","DB Error");				
			}
			
			private function setLibraryFolder(folder:String):void {
				var urlRequest:URLRequest = new URLRequest()
				var urlLoader:URLLoader;

				urlRequest.url = getLibraryFolderURL(folder);
				urlLoader  = new URLLoader()
				urlLoader.addEventListener(Event.COMPLETE, setLibraryFolder_complete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, setLibraryFolder_error);
				
				urlLoader.load(urlRequest);
					
			}
			
			private function setLibraryFolder_complete(e:Event):void {				
				trace("Library Folder Set");
			}
			
			private function setLibraryFolder_error(e:IOErrorEvent):void {
				Alert.show("Error setting library folder","API Error");				
			}
			
			private function onLogout(e:Event):void {
				this._username = "";
				this._password = "";
				saveCredentials();
				
				txtUsername.text = "";
				txtPassword.text = "";
				
				disableUploadButton();
				currentState = "Login";
				// Enable login controls give status
				status = "";
				txtPassword.enabled = true;
				txtUsername.enabled = true;
				btnLogin.enabled = true;
			}
			
			private function disableUploadButton():void {
				btnUpload.enabled = false;
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
				btnUpload.removeEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, dragExitHandler);		
			}
			
			private function enableUploadButton():void {
				btnUpload.enabled = true;
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
				btnUpload.addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, dragExitHandler);
			}
		]]>
	</mx:Script>
	<mx:Style source="s3merStyle.css"/>
	<mx:states>
		<mx:State name="Login">
			<mx:RemoveChild target="{pbTotal}"/>
			<mx:RemoveChild target="{pbFile}"/>
			<mx:RemoveChild target="{btnUpload}"/>
			<mx:AddChild position="lastChild">
				<mx:Form x="190" y="60">
					<mx:FormItem label="Username" color="#000000">
						<mx:TextInput id="txtUsername" color="#000000" themeColor="#000000"/>
					</mx:FormItem>
					<mx:FormItem label="Password" color="#000000" themeColor="#000000">
						<mx:TextInput id="txtPassword" displayAsPassword="true" color="#000000"/>
					</mx:FormItem>
					<mx:FormItem>
						<mx:Button label="Login" id="btnLogin" click="checkLogin(event)"/>
					</mx:FormItem>
				</mx:Form>
			</mx:AddChild>
			<mx:RemoveChild target="{applicationcontrolbar1}"/>
			<mx:SetStyle name="backgroundGradientColors" value="[#E4E4E4, #C1C1C1]"/>
		</mx:State>
		<mx:State name="AOT">
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{pbTotal}"/>
			<mx:RemoveChild target="{pbFile}"/>
			<mx:SetProperty name="width" value="304"/>
			<mx:SetProperty target="{btnUpload}" name="width" value="282"/>
			<mx:SetProperty target="{btnUpload}" name="height" value="177"/>
			<mx:SetProperty name="height" value="246"/>
		</mx:State>
	</mx:states>
	<mx:Button label="Drop Files Here" id="btnUpload" enabled="false" width="628" x="10" height="85" y="43" styleName="btnDrop"/>
	<mx:ProgressBar labelPlacement="top" label="Current File" id="pbFile" indeterminate="false" minimum="0" maximum="100" enabled="true" mode="manual" width="628" x="10" height="28" y="136" color="#000000"/>
	<mx:ProgressBar labelPlacement="top" label="Total Progress" id="pbTotal" indeterminate="false" minimum="0" maximum="100" enabled="true" mode="manual" width="628" x="10" height="28" y="172" color="#000000"/>
	<mx:ApplicationControlBar id="applicationcontrolbar1" cornerRadius="0" right="0" left="0" top="-1">
		<mx:CheckBox label="Always On Top" id="chkAOT" width="111" height="22">
			<mx:toolTip>Select this option to keep the window always on top.</mx:toolTip>
		</mx:CheckBox>
		<mx:Spacer width="100%"/>
		<mx:Button label="Logout" click="onLogout(event)" toolTip="Click here to logout and clear the settings" id="button1" width="74" height="22"/>
	</mx:ApplicationControlBar>
</mx:WindowedApplication>
